#!/usr/bin/env bash
#
# Copyright (C) 2016 Xenith Consulting Limited
# Author: Salim Badakhchani <salimb@xenithconsulting.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
########################################################################

# Switch on Debugging
set -x

# Check user privileges
[[ $(id -u) == 0 ]] || echo -e "\n# This script requires root privileges to run"

# Define logfile
LOG="/root/install.log"

echo -e "########################################################################" >> $LOG
echo -e "Installing System..." >> $LOG
echo -e "########################################################################\n" >> $LOG
echo -e $(date) >> $LOG
echo >> $LOG

# Execution statements logicaly grouped into functions.

function system_update {
    echo -e "# Updating system..." >> $LOG
    yum -y update > /dev/null 2>&1
}

function install_packages {
    echo -e "# Installing packages..." >> $LOG
    yum -y install iftop htop wget git curl tree bind bind-utils > /dev/null 2>&1
}

install_docker () {
    echo -e "# Patching docker" >> $LOG
    [[ -f "/etc/sysconfig/docker.orig" ]]; mv /etc/sysconfig/docker.orig /etc/sysconfig/docker
    cp -p /etc/sysconfig/docker /etc/sysconfig/docker.orig
    cat > /tmp/docker.patch << 'EOF'
--- /etc/sysconfig/docker	2015-12-10 17:57:32.000000000 -0500
+++ /etc/sysconfig/docker	2016-03-31 02:28:46.835000000 -0400
@@ -21,6 +21,7 @@
 # distributed, you can tell docker to not look for full authorization by
 # adding the registry to the INSECURE_REGISTRY line and uncommenting it.
 # INSECURE_REGISTRY='--insecure-registry'
+INSECURE_REGISTRY='--insecure-registry 172.30.0.0/16'
 
 # On an SELinux system, if you remove the --selinux-enabled option, you
 # also need to turn on the docker_transition_unconfined boolean.
EOF
(cd / && patch -p0) < /tmp/docker.patch
rm -f /tmp/docker.patch

echo -e "# Initialising docker" >> $LOG
systemctl enable docker
systemctl restart docker

docker pull openshift/origin-pod
docker pull openshift/origin-sti-builder
docker pull openshift/origin-docker-builder
docker pull openshift/origin-deployer
docker pull openshift/origin-docker-registry
docker pull openshift/origin-haproxy-router
}

install_nameserver () {
    echo -e "# Patching bind" >> $LOG
    [[ -f "/etc/named.conf.orig" ]]; mv /etc/named.conf.orig /etc/named.conf
    cp -p /etc/named.conf /etc/named.conf.orig
    cat > /tmp/bind.patch << 'EOF'
--- /etc/named.conf	2015-06-01 06:43:48.000000000 -0400
+++ /etc/named.conf	2016-04-18 10:15:51.743000000 -0400
@@ -8,13 +8,14 @@
 //
 
 options {
-	listen-on port 53 { 127.0.0.1; };
+	listen-on port 53 { 127.0.0.1; 192.168.122.101; };
 	listen-on-v6 port 53 { ::1; };
 	directory 	"/var/named";
 	dump-file 	"/var/named/data/cache_dump.db";
 	statistics-file "/var/named/data/named_stats.txt";
 	memstatistics-file "/var/named/data/named_mem_stats.txt";
-	allow-query     { localhost; };
+	allow-query     { any; };
+	forwarders	{ 8.8.8.8; 8.8.4.4; };
 
 	/* 
 	 - If you are building an AUTHORITATIVE DNS server, do NOT enable recursion.
@@ -30,6 +31,7 @@
 
 	dnssec-enable yes;
 	dnssec-validation yes;
+	dnssec-lookaside auto;
 
 	/* Path to ISC DLV key */
 	bindkeys-file "/etc/named.iscdlv.key";
@@ -52,6 +54,18 @@
 	file "named.ca";
 };
 
+zone "example.com" IN {
+	type master;
+	file "example.com.zone";
+	allow-update { none; };
+};
+        
+zone "122.168.192.in-addr.arpa" IN {
+	type master;
+	file "122.168.192.zone";
+	allow-update { none; };
+};
+
 include "/etc/named.rfc1912.zones";
 include "/etc/named.root.key";
EOF
    (cd / && patch -p0) < /tmp/bind.patch
    rm -f /tmp/bind.patch
  
    echo -e "# Creating reverse zone file" >> $LOG
    cat > /var/named/122.168.192.zone << 'EOF'
$ORIGIN 122.168.192.in-addr.arpa.
$TTL 86400
@       IN      SOA     kojak.example.com.      hostmaster.example.com. (
                        2016032801 ; serial
                        21600      ; refresh after 6 hours
                        3600       ; retry after 1 hour
                        604800     ; expire after 1 week
                        86400 )    ; minimum TTL of 1 day
;
@       IN      NS      kojak.example.com.
;
101     IN      PTR     kojak.example.com.
;
101     IN      PTR     master01.example.com.
101     IN      PTR     node01.example.com.
EOF
    chmod root:named /var/named/122.168.192.zone
     
    echo -e "# Creating zone file" >> $LOG
    cat > /var/named/example.com.zone << 'EOF'
$ORIGIN example.com.
$TTL 86400
@               IN      SOA     kojak.example.com.      hostmaster.example.com. (
                        2016041801 ; serial
                        21600      ; refresh after 6 hours
                        3600       ; retry after 1 hour
                        604800     ; expire after 1 week
                        86400 )    ; minimum TTL of 1 day
;
;

                IN      NS      kojak.example.com.
kojak           IN      A       192.168.122.101

*.example.com.  300 IN  A       192.168.122.101
master01        IN      A       192.168.122.101
node01          IN      A       192.168.122.101
EOF
    chmod root:named /var/named/example.com.zone
    systemctl enable named && systemctl start named

    echo -e "# Creating resolve file" >> $LOG
    cat > /etc/resolv.conf << 'EOF'
# Generated by Kojak
search example.com
nameserver 127.0.0.1
EOF
}

install_openshift () {
    echo -e "# Installing openshift" >> $LOG
    mkdir /opt/openshift-origin-v1.1
    chmod 755 /opt /opt/openshift-origin-v1.1
    cd /opt/openshift-origin-v1.1
    wget https://github.com/openshift/origin/releases/download/v1.1.3/openshift-origin-server-v1.1.3-cffae05-linux-64bit.tar.gz
    tar -zxvf openshift-origin-server-*.tar.gz --strip-components 1
    rm -f openshift-origin-server-*.tar.gz

    [[ -f /etc/profile.d/openshift.sh ]]; rm -f /etc/profile.d/openshift.sh
cat > /etc/profile.d/openshift.sh << 'EOF'
export OPENSHIFT=/opt/openshift-origin-v1.1
export PATH=$OPENSHIFT:$PATH
export KUBECONFIG=$OPENSHIFT/openshift.local.config/master/admin.kubeconfig
export CURL_CA_BUNDLE=$OPENSHIFT/openshift.local.config/master/ca.crt
EOF

    echo -e "# Configuring openshift" >> $LOG
    chmod 644 /etc/profile.d/openshift.sh
    . /etc/profile.d/openshift.sh
    ./openshift start --write-config=openshift.local.config
    chmod +r $OPENSHIFT/openshift.local.config/master/admin.kubeconfig
    chmod +r $OPENSHIFT/openshift.local.config/master/openshift-registry.kubeconfig
    chmod +r $OPENSHIFT/openshift.local.config/master/openshift-router.kubeconfig

    echo -e "# Patching openshift" >> $LOG
        [[ -f "$OPENSHIFT/openshift.local.config/master/master-config.yaml.orig " ]]; mv $OPENSHIFT/openshift.local.config/master/master-config.yaml.orig $OPENSHIFT/openshift.local.config/master/master-config.yaml
        cp -p $OPENSHIFT/openshift.local.config/master/master-config.yaml $OPENSHIFT/openshift.local.config/master/master-config.yaml.orig 
    cat > /tmp/openshift.patch << 'EOF'
--- /opt/openshift-origin-v1.1/openshift.local.config/master/master-config.yaml	2016-03-31 02:20:22.178000000 -0400
+++ /opt/openshift-origin-v1.1/openshift.local.config/master/master-config.yaml	2016-03-31 02:28:22.731000000 -0400
@@ -140,7 +140,7 @@
     mcsLabelsPerProject: 5
     uidAllocatorRange: 1000000000-1999999999/10000
 routingConfig:
-  subdomain: router.default.svc.cluster.local
+  subdomain: example.com
 serviceAccountConfig:
   limitSecretReferences: false
   managedNames:
EOF
    (cd / && patch -p0) < /tmp/openshift.patch
    rm -f /tmp/openshift.patch

    echo -e "# Initialising openshift" >> $LOG
    nohup $OPENSHIFT/openshift --cors-allowed-origins='.*' start &

    while ! timeout 1 bash -c "echo > /dev/tcp/localhost/8443"; do echo -e "# Retrying...please be patient" && sleep 12 ; done

	echo -e "# Creating service accounts for registry and router" >> $LOG
	oc login -u system:admin -n default
	oc project default
	echo '{"kind":"ServiceAccount","apiVersion":"v1","metadata":{"name":"registry"}}' | oc create -f -
	echo '{"kind":"ServiceAccount","apiVersion":"v1","metadata":{"name":"router"}}' | oc create -f -
	wget https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64
	chmod +x jq-linux64
	oc get scc privileged -o json | ./jq-linux64 '.users |= .+ ["system:serviceaccount:default:registry"]' | oc replace scc -f -
	oc get scc privileged -o json | ./jq-linux64 '.users |= .+ ["system:serviceaccount:default:router"]' | oc replace scc -f -
	oadm policy add-cluster-role-to-user cluster-admin admin
	
    echo -e "# Creating docker registry" >> $LOG
	mkdir /opt/openshift-registry
	chown ${USER}.${USER} /opt/openshift-registry
	oadm registry --credentials=$OPENSHIFT/openshift.local.config/master/openshift-registry.kubeconfig --service-account=registry --mount-host=/opt/openshift-registry
	
    echo -e "# Creating router" >> $LOG
	oadm router router --replicas=1 --credentials=$OPENSHIFT/openshift.local.config/master/openshift-router.kubeconfig --service-account=router
	curl -sk https://raw.githubusercontent.com/openshift/origin/master/examples/image-streams/image-streams-centos7.json | oc create -n openshift -f -
}

install_fabric8 () {
    echo -e "# Downloading gofabric8" >> $LOG
    cd /opt
    wget https://github.com/fabric8io/gofabric8/releases/download/v0.4.9/gofabric8-0.4.9-linux-amd64.tar.gz
    mkdir gofabric8
    tar zxfv gofabric8-0.4.9-linux-amd64.tar.gz -C gofabric8/

    echo -e "# Downloading fabric8 templates" >> $LOG
    curl -o fabric8.zip http://repo1.maven.org/maven2/io/fabric8/forge/distro/distro/2.2.153/distro-2.2.153-templates.zip
    unzip -d fabric8 fabric8.zip

    echo -e "# Installing fabric8" >> $LOG
    /opt/gofabric8/gofabric8 deploy --namespace="default" --domain example.com --yes 
    /opt/gofabric8/gofabric8 secrets --yes

    echo -e "# Configure namespace" >> $LOG
    oc get oauthclient fabric8
    oc process -v DOMAIN=example.com -f /opt/fabric8/main/console-2.2.153.json | oc create -f -
    /opt/gofabric8/gofabric8 validate --namespace="default"
}

update_system
install_packages
install_docker
install_nameserver
install_openshift
install_fabric8
