#!/usr/bin/env bash
#
# Copyright (C) 2016 Xenith Consulting Limited
# Author: Salim Badakhchani <salimb@xenithconsulting.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
########################################################################

# Switch on Debugging
set -x

# Check user privileges
[[ $(id -u) == 0 ]] || echo -e "\n# This script requires root privileges to run"

# Define logfile
LOG="/root/install.log"

echo -e "########################################################################" > ${LOG}
echo -e "Installing Openshift Origin..." >> ${LOG}
echo -e "########################################################################\n" >> ${LOG}
echo -e $(date) >> ${LOG}
echo >> ${LOG}

# Execution statements logically grouped into functions.

config_network() {
    echo -e "# Configuring network..." >> ${LOG}
    yum -y remove NetworkManager*
    systemctl stop NetworkManager
    systemctl disable NetworkManager
}

disable_firewall() {
    echo -e "# Disabling firewall..." >> ${LOG}
    systemctl stop iptables > /dev/null 2>&1 
    systemctl stop ip6tables > /dev/null 2>&1
    systemctl stop firewalld > /dev/null 2>&1
}

update_system() {
    echo -e "# Updating system..." >> ${LOG}
    yum -y update > /dev/null 2>&1
}

install_packages() {
    echo -e "# Installing packages..." >> ${LOG}
    [[ -f "/etc/yum.repos.d/rpmforge.repo" ]] || rpm -Uvh ftp://139.162.181.50/rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm
    yum -y install git wget unzip net-tools httpd-tools patch mlocate maven htop iftop curl tree bind-utils dos2unix
}

create_profiles() {
    echo "# Creating profile..." >> ${LOG}
    cat > /etc/profile.d/custom.sh << 'EOF'
# Prompt colors
if [ `whoami` != "root" ]; then
    PS1='\[\e[32m\][\u@\h \W]\$\[\e[0m\] '
else
    PS1='\[\e[31m\][\u@\h \W]\$\[\e[0m\] '
fi

# Aliases
alias c='clear'
alias h='history'
alias m='less /var/log/messages'
alias l='ll -has '
alias n='netstat -vatulpn | grep'
alias p='ps -A | grep'
alias g='gvim'

# Configure bash history 
HISTSIZE='1000000'
HISTIGNORE=' *:&:?:??'
HISTCONTROL='ignoreboth:erasedups'

export HISTSIZE HISTIGNORE HISTCONTROL

# Turn on bash history options
shopt -s histappend histreedit histverify

# Sync term history
history() {
  history_sync
  builtin history "$@"
}

history_sync() {
  builtin history -a         
  HISTFILESIZE=$HISTSIZE     
  builtin history -c         
  builtin history -r         
}

PROMPT_COMMAND=history_sync
EOF

    cat > /etc/profile.d/openshift.sh << 'EOF'
export OPENSHIFT_VERSION=v1.3.0-alpha.2
export OPENSHIFT=/opt/openshift-origin-server-${OPENSHIFT_VERSION}
export OPENSHIFT_CLIENT=/opt/openshift-origin-client-tools-${OPENSHIFT_VERSION}
export PATH=${OPENSHIFT}:${PATH}
export KUBECONFIG=${OPENSHIFT}/openshift.local.config/master/admin.kubeconfig
export CURL_CA_BUNDLE=${OPENSHIFT}/openshift.local.config/master/ca.crt
EOF
}

setup_env() {
    echo -e "# Setting up environment..." >> ${LOG}
    source /etc/profile.d/custom.sh
    source /etc/profile.d/openshift.sh
}


create_resolve() {
    echo -e "# Creating resolve file..." >> ${LOG}
    cat > /etc/resolv.conf << 'EOF'
# Generated by Kojak
domain oneincredible.com
search oneincredible.com
nameserver 8.8.8.8
nameserver 8.8.4.4
EOF
}

create_dnsmasq() {
    echo -e "# Creating dnsmasq file..." >> ${LOG}
    [[ -f "/etc/dnsmasq.conf.orig" ]] || cp /etc/dnsmasq.conf /etc/dnsmasq.conf.orig
    cat > /etc/dnsmasq.conf << 'EOF'
# Reverse DNS record for master
host-record=master.oneincredible.com,139.162.173.55

# Wildcard DNS for OpenShift Applications - Points to Router
address=/oneincredible.com/139.162.173.55

# Forward .local queries to SkyDNS
server=/local/127.0.0.1#8053

# Forward reverse queries for service network to SkyDNS.
# This is for default OpenShift SDN - change as needed.
server=/17.30.172.in-addr.arpa/127.0.0.1#8053

# Do not read /etc/resolv.conf and forward requests
# to nameservers listed there:
no-resolv

# Never forward plain names (without a dot or domain part)
domain-needed

# Never forward addresses in the non-routed address spaces.
bogus-priv

listen-address=127.0.0.1
EOF
}

add_hostname() {
    echo -e "# Setting up hostname..." >> ${LOG}
    hostnamectl set-hostname master.oneincredible.com
    [[ ! -z $(grep devops /etc/hosts) ]] || echo -e "139.162.173.55\tmaster master.oneincredible.com" >> /etc/hosts
}

install_docker() {
    echo -e "# Installing docker..." >> ${LOG}
    cat > /etc/yum.repos.d/docker.repo <<-'EOF'
[docker-engine]
name=Docker Repository
baseurl=https://yum.dockerproject.org/repo/main/centos/$releasever/
enabled=1
gpgcheck=1
gpgkey=https://yum.dockerproject.org/gpg
EOF

yum -y install docker-engine

[[ -d "/etc/systemd/system/docker.service.d " ]] || mkdir -p /etc/systemd/system/docker.service.d && cat > /etc/systemd/system/docker.service.d/override.conf << 'EOF'
[Service] 
ExecStart= 
ExecStart=/usr/bin/docker daemon --storage-driver=overlay --insecure-registry 172.30.0.0/16 -H fd://
EOF
 
    echo -e "# Initialising docker..." >> ${LOG}
    systemctl daemon-reload
    systemctl enable docker
    systemctl restart docker

    docker pull openshift/origin-pod
    docker pull openshift/origin-sti-builder
    docker pull openshift/origin-docker-builder
    docker pull openshift/origin-deployer
    docker pull openshift/origin-docker-registry
    docker pull openshift/origin-haproxy-router
}

install_openshift() {
    echo -e "# Installing openshift..." >> ${LOG}
    source /etc/profile.d/openshift.sh
    mkdir /opt/openshift-origin-server-${OPENSHIFT_VERSION}
    [[ -f "/tmp/openshift-origin-server-${OPENSHIFT_VERSION}-983578e-linux-64bit.tar.gz" ]] || \
    wget https://github.com/openshift/origin/releases/download/${OPENSHIFT_VERSION}/openshift-origin-server-${OPENSHIFT_VERSION}-983578e-linux-64bit.tar.gz -P /tmp
    tar -zxvf /tmp/openshift-origin-server-${OPENSHIFT_VERSION}-983578e-linux-64bit.tar.gz -C /opt/openshift-origin-server-${OPENSHIFT_VERSION}/ --strip-components 1
    cat > /etc/systemd/system/openshift-origin.service << 'EOF'
[Unit]
Description=Origin Master Service
After=docker.service
Requires=docker.service
 
[Service]
Restart=always
RestartSec=10s
ExecStart=/opt/openshift-origin-server-${OPENSHIFT_VERSION}/openshift start
WorkingDirectory=/opt/openshift-origin-server-${OPENSHIFT_VERSION}
 
[Install]
WantedBy=multi-user.target
EOF
}

patch_openshift() {
    echo -e "# Patching openshift..." >> ${LOG}
    source /etc/profile.d/openshift.sh
    cd ${OPENSHIFT}
    ${OPENSHIFT}/openshift start --write-config=openshift.local.config 
    [[ -f "${OPENSHIFT}/openshift.local.config/master/master-config.yaml.orig" ]]; mv \
    ${OPENSHIFT}/openshift.local.config/master/master-config.yaml.orig ${OPENSHIFT}/openshift.local.config/master/master-config.yaml
    cp -p ${OPENSHIFT}/openshift.local.config/master/master-config.yaml ${OPENSHIFT}/openshift.local.config/master/master-config.yaml.orig
    cat > /tmp/openshift.patch << 'EOF'
--- /opt/openshift-origin-server-v1.3.0-alpha.2/openshift.local.config/master/master-config.yaml	2016-07-14 01:57:02.233390544 +0000
+++ /opt/openshift-origin-server-v1.3.0-alpha.2/openshift.local.config/master/master-config.yaml	2016-07-14 01:56:05.013065611 +0000
@@ -36,6 +36,7 @@
 - 127.0.0.1
 - 139.162.173.55:8443
 - localhost
+- ".*"
 disabledFeatures: null
 dnsConfig:
   allowRecursiveQueries: true
@@ -124,13 +125,14 @@
     method: auto
     serviceAccountMethod: prompt
   identityProviders:
-  - challenge: true
+  - name: htpaswd
+    challenge: true
     login: true
     mappingMethod: claim
-    name: anypassword
     provider:
       apiVersion: v1
-      kind: AllowAllPasswordIdentityProvider
+      kind: HTPasswdPasswordIdentityProvider
+      file: /opt/users.htpasswd
   masterCA: ca-bundle.crt
   masterPublicURL: https://139.162.173.55:8443
   masterURL: https://139.162.173.55:8443
@@ -160,7 +162,7 @@
     mcsLabelsPerProject: 5
     uidAllocatorRange: 1000000000-1999999999/10000
 routingConfig:
-  subdomain: router.default.svc.cluster.local
+  subdomain: oneincredible.com
 serviceAccountConfig:
   limitSecretReferences: false
   managedNames:
EOF
    (cd / && patch -p0) < /tmp/openshift.patch
    rm -f /tmp/openshift.patch
}


config_openshift() {
    source /etc/profile.d/openshift.sh
    echo -e "# Configuring openshift..." >> ${LOG}
    chmod +r ${OPENSHIFT}/openshift.local.config/master/admin.kubeconfig
    chmod +r ${OPENSHIFT}/openshift.local.config/master/openshift-registry.kubeconfig
    chmod +r ${OPENSHIFT}/openshift.local.config/master/openshift-router.kubeconfig

    htpasswd -cb /opt/users.htpasswd admin admin

    systemctl daemon-reload
    systemctl enable openshift-origin
    systemctl start openshift-origin

    source /etc/profile.d/openshift.sh

    while ! timeout 1 bash -c "echo > /dev/tcp/localhost/8443"; do echo -e "# Retrying...please be patient" && sleep 12 ; done
    echo -e "# Creating service accounts for registry and router..." >> ${LOG}
    oc login -u system:admin -n default
    oc project default
    echo '{"kind":"ServiceAccount","apiVersion":"v1","metadata":{"name":"registry"}}' | oc create -f -
    echo '{"kind":"ServiceAccount","apiVersion":"v1","metadata":{"name":"router"}}' | oc create -f -
    [[ -f "/tmp/jq-linux64" ]] || wget https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 -P /tmp
    chmod +x /tmp/jq-linux64
    oc get scc privileged -o json | /tmp/jq-linux64 '.users |= .+ ["system:serviceaccount:default:registry"]' | oc replace scc -f -
    oc get scc privileged -o json | /tmp/jq-linux64 '.users |= .+ ["system:serviceaccount:default:router"]' | oc replace scc -f -
	
    echo -e "# Creating user roles..." >> ${LOG}
    oadm policy add-cluster-role-to-user cluster-admin admin
	
    echo -e "# Creating docker registry..." >> ${LOG}
    mkdir /opt/openshift-registry
    chcon -Rt svirt_sandbox_file_t /opt/openshift-registry
    chown root:root /opt/openshift-registry
    oadm policy add-scc-to-user privileged -z registry 
    oadm registry --service-account=registry --mount-host=/opt/openshift-registry
	
    echo -e "# Creating router..." >> ${LOG}
    oadm policy add-scc-to-user hostnetwork -z router
    oadm router router --replicas=1 --service-account=router 
    
    [[ -f "/tmp/openshift-ansible.git" ]] || cd /tmp && git clone https://github.com/openshift/openshift-ansible.git
    cd /tmp/openshift-ansible/roles/openshift_examples/files/examples/latest/
    for image in image-streams/image-streams-centos7.json; do cat $image | oc create -n openshift -f -; done
    for image in db-templates/*.json; do cat $image | oc create -n openshift -f -; done
    for image in quickstart-templates/*.json; do cat $image | oc create -n openshift -f -; done
}

install_openshift_client() {
    source /etc/profile.d/openshift.sh
    echo -e "# Installing openshift client..." >> ${LOG}
    mkdir /opt/openshift-origin-client-tools-${OPENSHIFT_VERSION}
    [[ -f "/tmp/openshift-origin-client-tools-${OPENSHIFT_VERSION}-983578e-linux-64bit.tar.gz" ]] || \
    wget https://github.com/openshift/origin/releases/download/${OPENSHIFT_VERSION}/openshift-origin-client-tools-${OPENSHIFT_VERSION}-983578e-linux-64bit.tar.gz -P /tmp
    tar -zxvf /tmp/openshift-origin-client-tools-${OPENSHIFT_VERSION}-983578e-linux-64bit.tar.gz -C /opt/openshift-origin-server-${OPENSHIFT_VERSION}/ 
}

install_fabric8() {
    source /etc/profile.d/openshift.sh
    
    echo -e "# Downloading gofabric8..." >> ${LOG}
    cd /opt
    mkdir gofabric8
    [[ -f "/tmp/gofabric8-0.4.31-linux-amd64.tar.gz" ]] || \
    wget https://github.com/fabric8io/gofabric8/releases/download/v0.4.31/gofabric8-0.4.31-linux-amd64.tar.gz -P /tmp
    tar zxfv /tmp/gofabric8-0.4.31-linux-amd64.tar.gz -C /opt/gofabric8/

    echo -e "# Installing fabric8..." >> ${LOG}
    /opt/gofabric8/gofabric8 deploy --yes --namespace="default" --domain oneincredible.com
    oc get oauthclient fabric8

    echo -e "# Configuring cd-pipeline..." >> ${LOG}
    /opt/gofabric8/gofabric8 pull cd-pipeline

    echo -e "# Validate installaiton..." >> ${LOG}
    /opt/gofabric8/gofabric8 validate --namespace="default"
}

installation_complete() {
    echo -e "# Installation complete!!!" >> ${LOG}
}

config_network
disable_firewall
update_system
install_packages
create_profiles
setup_env
create_resolve
create_dnsmasq
add_hostname
install_docker
install_openshift
patch_openshift
config_openshift
install_openshift_client
install_fabric8
installation_complete
