#!/usr/bin/env bash
#
# Copyright (C) 2016 Xenith Consulting Limited
# Author: Salim Badakhchani <salimb@xenithconsulting.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
########################################################################

# Switch on Debugging
set -x

# Check user privileges
[[ $(id -u) == 0 ]] || echo -e "\n# This script requires root privileges to run"

# Define logfile
LOG="/root/install.log"

echo -e "########################################################################" > ${LOG}
echo -e "Installing Openshift Origin..." >> ${LOG}
echo -e "########################################################################\n" >> ${LOG}
echo -e $(date) >> ${LOG}
echo >> ${LOG}

# Execution statements logically grouped into functions.

config_network() {
    echo -e "# Configuring network..." >> ${LOG}
    yum -y remove NetworkManager*
    systemctl stop NetworkManager
    systemctl disable NetworkManager
}

disable_firewall() {
    echo -e "# Disabling firewall..." >> ${LOG}
    systemctl stop iptables > /dev/null 2>&1 
    systemctl stop ip6tables > /dev/null 2>&1
    systemctl stop firewalld > /dev/null 2>&1
}

update_system() {
    echo -e "# Updating system..." >> ${LOG}
    yum -y update > /dev/null 2>&1
}

install_packages() {
    echo -e "# Installing packages..." >> ${LOG}
    yum -y install epel-release
    yum -y install git wget unzip net-tools httpd-tools patch mlocate maven htop iftop curl tree bind-utils dos2unix
}

create_profiles() {
    echo "# Creating profile..." >> ${LOG}
    cat > /etc/profile.d/custom.sh << 'EOF'
# Prompt colors
if [ `whoami` != "root" ]; then
    PS1='\[\e[32m\][\u@\h \W]\$\[\e[0m\] '
else
    PS1='\[\e[31m\][\u@\h \W]\$\[\e[0m\] '
fi

# Aliases
alias c='clear'
alias h='history'
alias m='less /var/log/messages'
alias l='ll -has '
alias n='netstat -vatulpn | grep'
alias p='ps -A | grep'
alias g='gvim'

# Configure bash history 
HISTSIZE='1000000'
HISTIGNORE=' *:&:?:??'
HISTCONTROL='ignoreboth:erasedups'

export HISTSIZE HISTIGNORE HISTCONTROL

# Turn on bash history options
shopt -s histappend histreedit histverify

# Sync term history
history() {
  history_sync
  builtin history "$@"
}

history_sync() {
  builtin history -a         
  HISTFILESIZE=$HISTSIZE     
  builtin history -c         
  builtin history -r         
}

PROMPT_COMMAND=history_sync
EOF

    cat > /etc/profile.d/kojak.sh << 'EOF'
export OPENSHIFT=/var/lib/openshift
export OPENSHIFT_VERSION=v1.2.1-5e723f6
export OPENSHIFT_SERVER=/opt/openshift-origin-server-${OPENSHIFT_VERSION}
export OPENSHIFT_CLIENT=/opt/openshift-origin-client-tools-${OPENSHIFT_VERSION}
export FABRIC8=/opt/gofabric8/
export PATH=${OPENSHIFT}:${OPENSHIFT_SERVER}:${OPENSHIFT_CLIENT}:${FABRIC8}:${PATH}
export KUBECONFIG=${OPENSHIFT}/openshift.local.config/master/admin.kubeconfig
export CA_BUNDLE=${OPENSHIFT}/openshift.local.config/master/ca.crt
EOF
}

setup_env() {
    echo -e "# Setting up environment..." >> ${LOG}
    source /etc/profile.d/custom.sh
    source /etc/profile.d/kojak.sh
}

create_resolve() {
    echo -e "# Creating resolve file..." >> ${LOG}
    cat > /etc/resolv.conf << 'EOF'
# Generated by Kojak
domain example.com
nameserver 192.168.122.1
EOF
}

add_hostname() {
    echo -e "# Setting up hostname..." >> ${LOG}
    hostnamectl set-hostname master.example.com
    [[ ! -z $(grep master /etc/hosts) ]] || echo -e "\n192.168.122.100\tmaster master.example.com" >> /etc/hosts
}

install_docker() {
    echo -e "# Installing docker..." >> ${LOG}
    cat > /etc/yum.repos.d/docker.repo <<-'EOF'
[docker-engine]
name=Docker Repository
baseurl=https://yum.dockerproject.org/repo/main/centos/$releasever/
enabled=1
gpgcheck=1
gpgkey=https://yum.dockerproject.org/gpg
EOF

    yum -y install docker-engine
}

patch_docker() {
    echo -e "# Patching docker..." >> ${LOG}
    [[ -f "/usr/lib/systemd/system/docker.service.orig" ]]; mv \
    /usr/lib/systemd/system/docker.service.orig /usr/lib/systemd/system/docker.service
    cp -p /usr/lib/systemd/system/docker.service /usr/lib/systemd/system/docker.service.orig
    cat > /tmp/docker.patch << 'EOF'
--- /usr/lib/systemd/system/docker.service    2016-07-27 19:35:00.000000000 -0400
+++ /usr/lib/systemd/system/docker.service    2016-07-30 18:53:27.739000000 -0400
@@ -8,7 +8,7 @@
 # the default is not to use systemd for cgroups because the delegate issues still
 # exists and systemd currently does not support the cgroup feature set required
 # for containers run by docker
-ExecStart=/usr/bin/dockerd
+ExecStart=/usr/bin/dockerd --insecure-registry=172.0.0.0/8
 ExecReload=/bin/kill -s HUP $MAINPID
 # Having non-zero Limit*s causes performance problems due to accounting overhead
 # in the kernel. We recommend using cgroups to do container-local accounting.
EOF
    (cd / && patch -p0) < /tmp/docker.patch
    rm -f /tmp/docker.patch
}
    
initialise_docker() { 
    echo -e "# Initialising docker..." >> ${LOG}
    systemctl daemon-reload
    systemctl enable docker
    systemctl restart docker

    docker pull openshift/origin-pod
    docker pull openshift/origin-sti-builder
    docker pull openshift/origin-docker-builder
    docker pull openshift/origin-deployer
    docker pull openshift/origin-docker-registry
    docker pull openshift/origin-haproxy-router
    docker pull prom/haproxy-exporter
}

install_openshift_client() {
    echo -e "# Installing openshift client..." >> ${LOG}
    source /etc/profile.d/kojak.sh
    mkdir ${OPENSHIFT_CLIENT}
    [[ -f "/tmp/openshift-origin-server-v1.2.1-5e723f6-linux-64bit.tar.gz" ]] || \
    wget https://github.com/openshift/origin/releases/download/v1.2.1/openshift-origin-server-v1.2.1-5e723f6-linux-64bit.tar.gz -P /tmp
    tar -zxvf /tmp/openshift-origin-server-v1.2.1-5e723f6-linux-64bit.tar.gz -C ${OPENSHIFT_CLIENT}/
}

install_openshift() {
    echo -e "# Installing openshift..." >> ${LOG}
    source /etc/profile.d/kojak.sh
    mkdir ${OPENSHIFT}
    mkdir ${OPENSHIFT_SERVER}
    [[ -f "/tmp/openshift-origin-server-v1.2.1-5e723f6-linux-64bit.tar.gz" ]] || \
    wget https://github.com/openshift/origin/releases/download/v1.2.1/openshift-origin-server-v1.2.1-5e723f6-linux-64bit.tar.gz -P /tmp
    tar -zxvf /tmp/openshift-origin-server-v1.2.1-5e723f6-linux-64bit.tar.gz -C ${OPENSHIFT_SERVER}/ --strip-components 1
    cat >/usr/lib/systemd/system/openshift.service<< 'EOF'
[Unit]
Description=OpenShift
Requires=docker.service network.service
After=network.service

[Service]
ExecStart=/opt/openshift-origin-server-v1.2.1-5e723f6/openshift start --master-config=/var/lib/openshift/openshift.local.config/master/master-config.yaml --node-config=/var/lib/openshift/openshift.local.config/node-master.example.com/node-config.yaml
WorkingDirectory=/var/lib/openshift/

[Install]
WantedBy=multi-user.target
EOF
}

patch_openshift() {
    echo -e "# Patching openshift..." >> ${LOG}
    source /etc/profile.d/kojak.sh
    cd ${OPENSHIFT}
    ${OPENSHIFT_SERVER}/openshift start --write-config=openshift.local.config 
    [[ -f "${OPENSHIFT}/openshift.local.config/master/master-config.yaml.orig" ]]; mv \
    ${OPENSHIFT}/openshift.local.config/master/master-config.yaml.orig ${OPENSHIFT}/openshift.local.config/master/master-config.yaml
    cp -p ${OPENSHIFT}/openshift.local.config/master/master-config.yaml ${OPENSHIFT}/openshift.local.config/master/master-config.yaml.orig
    cat > /tmp/openshift.patch << 'EOF'
--- /var/lib/openshift/openshift.local.config/master/master-config.yaml    2016-07-18 17:31:16.572963662 +0000
+++ /var/lib/openshift/openshift.local.config/master/master-config.yaml    2016-07-18 17:41:31.726862053 +0000
@@ -28,6 +28,7 @@
+- .*
 - 127.0.0.1
 - 192.168.122.100:8443
 - localhost
 disabledFeatures: null
 dnsConfig:
   allowRecursiveQueries: false
@@ -112,10 +113,11 @@
   - challenge: true
     login: true
     mappingMethod: claim
-    name: anypassword
+    name: HTPasswd
     provider:
       apiVersion: v1
-      kind: AllowAllPasswordIdentityProvider
+      kind: HTPasswdPasswordIdentityProvider
+      file: /etc/openshift/users.htpasswd
   masterCA: ca-bundle.crt
   masterPublicURL: https://192.168.122.100:8443
   masterURL: https://192.168.122.100:8443
@@ -145,7 +147,7 @@
     mcsLabelsPerProject: 5
     uidAllocatorRange: 1000000000-1999999999/10000
 routingConfig:
-  subdomain: router.default.svc.cluster.local
+  subdomain: example.com
 serviceAccountConfig:
   limitSecretReferences: false
   managedNames:
EOF
    (cd / && patch -p0) < /tmp/openshift.patch
    rm -f /tmp/openshift.patch
}

config_openshift() {
    echo -e "# Configuring openshift..." >> ${LOG}
    source /etc/profile.d/kojak.sh
    mkdir -p /var/lib/openshift/openshift.local.manifests
    pushd /var/lib/openshift
    cat <<EOF >> /var/lib/openshift/openshift.local.config/node-192.168.122.100/node-config.yaml
kubeletArguments:
  "read-only-port":
    - "10255"
EOF
    sed -i 's|^podManifestConfig: null|podManifestConfig:\\n  path: /var/lib/openshift/openshift.local.manifests\\n  fileCheckIntervalSeconds: 10|' /var/lib/openshift/openshift.loc
    popd
    restorecon -Rv /var/lib/openshift
    mkdir /etc/openshift
    htpasswd -cb /etc/openshift/users.htpasswd admin admin
}

initialise_openshift() {
    echo -e "# Initialising openshift..." >> ${LOG}
    source /etc/profile.d/kojak.sh
    systemctl daemon-reload
    systemctl enable openshift.service
    systemctl start openshift.service

    while true; do curl -k -s -f -o /dev/null --connect-timeout 1 https://localhost:8443/healthz/ready && break || sleep 1 ; done
	
    echo -e "# Creating user roles..." >> ${LOG}
    oc adm policy add-cluster-role-to-user cluster-admin admin
    oc adm policy add-cluster-role-to-group cluster-reader system:serviceaccounts
	
    [[ -f "/tmp/openshift-ansible.git" ]] || cd /tmp && git clone https://github.com/openshift/openshift-ansible.git
    cd /tmp/openshift-ansible/roles/openshift_examples/files/examples/latest/
    for image in image-streams/image-streams-centos7.json; do cat $image | oc create -n openshift -f -; done
    for image in db-templates/*.json; do cat $image | oc create -n openshift -f -; done
    for image in quickstart-templates/*.json; do cat $image | oc create -n openshift -f -; done
}

create_users() {
    echo -e "# Creating user roles..." >> ${LOG}
    source /etc/profile.d/kojak.sh
    while true; do curl -k -s -f -o /dev/null --connect-timeout 1 https://localhost:8443/healthz/ready && break || sleep 1 ; done
    oc adm policy add-cluster-role-to-user cluster-admin admin
    oc adm policy add-cluster-role-to-group cluster-reader system:serviceaccounts
}

install_fabric8() {
    echo -e "# Downloading gofabric8..." >> ${LOG}
    source /etc/profile.d/kojak.sh
    cd /opt
    mkdir gofabric8
    [[ -f "/tmp/gofabric8-0.4.35-linux-amd64.tar.gz" ]] || \
    wget https://github.com/fabric8io/gofabric8/releases/download/v0.4.35/gofabric8-0.4.35-linux-amd64.tar.gz -P /tmp
    tar zxfv /tmp/gofabric8-0.4.35-linux-amd64.tar.gz -C /opt/gofabric8/

    echo -e "# Installing fabric8..." >> ${LOG}
    gofabric8 deploy --yes --namespace="default" --domain example.com
    oc get oauthclient fabric8

    echo -e "# Configuring cd-pipeline..." >> ${LOG}
    gofabric8 pull cd-pipeline
}

create_routes() {
    echo -e "# Creating routes..." >> ${LOG}
    source /etc/profile.d/kojak.sh
    oadm policy add-scc-to-user hostnetwork -z router
    oc adm router --create --credentials=/var/lib/openshift/openshift.local.config/master/openshift-router.kubeconfig --service-account=router --expose-metrics
    until oc get pods -l openshift.io/deployer-pod-for.name=router-1 | grep -m 1 "Running"; do sleep 1 ; done
    oc annotate service router prometheus.io/port=9101
    oc annotate service router prometheus.io/scheme=http
    oc annotate service router prometheus.io/path=/metrics
    oc annotate service router prometheus.io/scrape=true
}

create_registry() {
    echo -e "# Creating the registry..." >> {LOG}
    source /etc/profile.d/kojak.sh
    oc adm registry --create --credentials=/var/lib/openshift/openshift.local.config/master/openshift-registry.kubeconfig
}

post_install() {
    echo -e "# Validate installaiton..." >> ${LOG}
    source /etc/profile.d/kojak.sh
    gofabric8 validate --namespace="default"
    echo -e "# Installation complete!!!" >> ${LOG}
}

config_network
disable_firewall
update_system
install_packages
create_profiles
setup_env
create_resolve
add_hostname
install_docker
patch_docker
initialise_docker 
install_openshift_client
install_openshift
patch_openshift
config_openshift
initialise_openshift
create_users
install_fabric8
create_routes
create_registry
post_install
